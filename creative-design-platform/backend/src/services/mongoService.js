const mongoose = require('mongoose');\n\nclass MongoService {\n  constructor() {\n    this.connection = null;\n    this.isConnected = false;\n  }\n\n  async connect(mongoUrl = process.env.MONGODB_URI || 'mongodb://localhost:27017/creative-design-platform') {\n    try {\n      if (this.isConnected) {\n        console.log('MongoDB already connected');\n        return this.connection;\n      }\n\n      console.log('Connecting to MongoDB...');\n      \n      const options = {\n        maxPoolSize: 10,\n        serverSelectionTimeoutMS: 5000,\n        socketTimeoutMS: 45000,\n        bufferCommands: false,\n        bufferMaxEntries: 0\n      };\n\n      this.connection = await mongoose.connect(mongoUrl, options);\n      this.isConnected = true;\n      \n      console.log('✅ MongoDB connected successfully');\n      \n      // Handle connection events\n      mongoose.connection.on('error', (err) => {\n        console.error('MongoDB connection error:', err);\n        this.isConnected = false;\n      });\n\n      mongoose.connection.on('disconnected', () => {\n        console.log('MongoDB disconnected');\n        this.isConnected = false;\n      });\n\n      mongoose.connection.on('reconnected', () => {\n        console.log('MongoDB reconnected');\n        this.isConnected = true;\n      });\n\n      return this.connection;\n    } catch (error) {\n      console.error('Failed to connect to MongoDB:', error);\n      this.isConnected = false;\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    try {\n      if (this.connection) {\n        await mongoose.disconnect();\n        this.isConnected = false;\n        console.log('MongoDB disconnected');\n      }\n    } catch (error) {\n      console.error('Error disconnecting from MongoDB:', error);\n      throw error;\n    }\n  }\n\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      readyState: mongoose.connection.readyState,\n      host: mongoose.connection.host,\n      port: mongoose.connection.port,\n      name: mongoose.connection.name\n    };\n  }\n\n  async createIndexes() {\n    try {\n      // Create indexes for better performance\n      const collections = [\n        'canvasdata',\n        'canvashistory',\n        'assetmetadata'\n      ];\n\n      for (const collectionName of collections) {\n        const collection = mongoose.connection.db.collection(collectionName);\n        \n        switch (collectionName) {\n          case 'canvasdata':\n            await collection.createIndex({ canvasId: 1 });\n            await collection.createIndex({ designSetId: 1 });\n            await collection.createIndex({ updatedAt: -1 });\n            await collection.createIndex({ canvasId: 1, version: -1 });\n            break;\n            \n          case 'canvashistory':\n            await collection.createIndex({ canvasId: 1, version: -1 });\n            await collection.createIndex({ createdAt: -1 });\n            await collection.createIndex({ canvasId: 1, createdAt: -1 });\n            break;\n            \n          case 'assetmetadata':\n            await collection.createIndex({ userId: 1 });\n            await collection.createIndex({ type: 1 });\n            await collection.createIndex({ tags: 1 });\n            await collection.createIndex({ createdAt: -1 });\n            break;\n        }\n      }\n      \n      console.log('✅ MongoDB indexes created successfully');\n    } catch (error) {\n      console.error('Error creating MongoDB indexes:', error);\n      throw error;\n    }\n  }\n\n  async healthCheck() {\n    try {\n      await mongoose.connection.db.admin().ping();\n      return {\n        status: 'healthy',\n        isConnected: this.isConnected,\n        uptime: process.uptime(),\n        ...this.getConnectionStatus()\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        error: error.message,\n        isConnected: false\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet mongoService;\n\nfunction getMongoService() {\n  if (!mongoService) {\n    mongoService = new MongoService();\n  }\n  return mongoService;\n}\n\nmodule.exports = {\n  MongoService,\n  getMongoService\n};