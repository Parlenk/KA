const mongoose = require('mongoose');\n\n// Schema for canvas object properties\nconst CanvasObjectSchema = new mongoose.Schema({\n  id: { type: String, required: true },\n  type: { \n    type: String, \n    required: true,\n    enum: ['text', 'image', 'shape', 'video', 'audio', 'group']\n  },\n  layerIndex: { type: Number, default: 0 },\n  locked: { type: Boolean, default: false },\n  visible: { type: Boolean, default: true },\n  \n  // Transform properties\n  left: { type: Number, default: 0 },\n  top: { type: Number, default: 0 },\n  width: { type: Number, required: true },\n  height: { type: Number, required: true },\n  scaleX: { type: Number, default: 1 },\n  scaleY: { type: Number, default: 1 },\n  angle: { type: Number, default: 0 },\n  opacity: { type: Number, default: 1, min: 0, max: 1 },\n  \n  // Style properties\n  fill: { type: String, default: '#000000' },\n  stroke: { type: String },\n  strokeWidth: { type: Number, default: 0 },\n  strokeDashArray: [Number],\n  \n  // Text-specific properties\n  text: { type: String },\n  fontFamily: { type: String },\n  fontSize: { type: Number },\n  fontWeight: { type: String },\n  fontStyle: { type: String },\n  textAlign: { type: String },\n  textDecoration: { type: String },\n  lineHeight: { type: Number },\n  charSpacing: { type: Number },\n  \n  // Image-specific properties\n  src: { type: String },\n  crossOrigin: { type: String },\n  filters: [{\n    type: { type: String },\n    options: mongoose.Schema.Types.Mixed\n  }],\n  \n  // Shape-specific properties\n  radius: { type: Number },\n  rx: { type: Number },\n  ry: { type: Number },\n  \n  // Group-specific properties\n  objects: [this], // Recursive reference for nested objects\n  \n  // Animation properties\n  animations: [{\n    id: String,\n    name: String,\n    duration: Number,\n    delay: Number,\n    easing: String,\n    keyframes: [{\n      time: Number,\n      properties: mongoose.Schema.Types.Mixed\n    }]\n  }],\n  \n  // Custom data\n  customData: mongoose.Schema.Types.Mixed,\n  \n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n}, { \n  _id: false,\n  minimize: false\n});\n\n// Main canvas data schema\nconst CanvasDataSchema = new mongoose.Schema({\n  canvasId: { type: String, required: true, index: true },\n  designSetId: { type: String, required: true, index: true },\n  userId: { type: String, required: true, index: true },\n  \n  // Canvas properties\n  width: { type: Number, required: true },\n  height: { type: Number, required: true },\n  backgroundColor: { type: String, default: '#ffffff' },\n  backgroundImage: { type: String },\n  backgroundType: { \n    type: String, \n    enum: ['color', 'gradient', 'image'],\n    default: 'color'\n  },\n  \n  // Canvas objects\n  objects: [CanvasObjectSchema],\n  \n  // Canvas settings\n  settings: {\n    zoom: { type: Number, default: 1 },\n    viewportTransform: [Number],\n    selection: { type: Boolean, default: true },\n    grid: {\n      enabled: { type: Boolean, default: false },\n      size: { type: Number, default: 20 },\n      color: { type: String, default: '#cccccc' }\n    },\n    guides: {\n      enabled: { type: Boolean, default: true },\n      color: { type: String, default: '#ff0000' }\n    },\n    snap: {\n      enabled: { type: Boolean, default: true },\n      tolerance: { type: Number, default: 5 }\n    }\n  },\n  \n  // Version control\n  version: { type: Number, default: 1 },\n  parentVersion: { type: Number },\n  \n  // Collaboration data\n  lastEditedBy: { type: String },\n  lockedBy: { type: String },\n  lockedAt: { type: Date },\n  \n  // Metadata\n  metadata: {\n    name: String,\n    description: String,\n    tags: [String],\n    thumbnail: String,\n    preview: String,\n    stats: {\n      objectCount: { type: Number, default: 0 },\n      textObjects: { type: Number, default: 0 },\n      imageObjects: { type: Number, default: 0 },\n      shapeObjects: { type: Number, default: 0 }\n    }\n  },\n  \n  // Timestamps\n  createdAt: { type: Date, default: Date.now, index: true },\n  updatedAt: { type: Date, default: Date.now, index: true },\n  lastSyncedAt: { type: Date }\n}, {\n  collection: 'canvasdata',\n  timestamps: true\n});\n\n// Indexes for performance\nCanvasDataSchema.index({ canvasId: 1, version: -1 });\nCanvasDataSchema.index({ designSetId: 1, updatedAt: -1 });\nCanvasDataSchema.index({ userId: 1, updatedAt: -1 });\nCanvasDataSchema.index({ 'metadata.tags': 1 });\n\n// Pre-save middleware to update stats\nCanvasDataSchema.pre('save', function(next) {\n  if (this.objects) {\n    this.metadata.stats.objectCount = this.objects.length;\n    this.metadata.stats.textObjects = this.objects.filter(obj => obj.type === 'text').length;\n    this.metadata.stats.imageObjects = this.objects.filter(obj => obj.type === 'image').length;\n    this.metadata.stats.shapeObjects = this.objects.filter(obj => ['rect', 'circle', 'triangle', 'polygon'].includes(obj.type)).length;\n  }\n  \n  this.updatedAt = new Date();\n  next();\n});\n\n// Instance methods\nCanvasDataSchema.methods.toCanvasJSON = function() {\n  return {\n    version: '5.3.0', // Fabric.js version compatibility\n    objects: this.objects,\n    background: this.backgroundColor,\n    backgroundImage: this.backgroundImage,\n    width: this.width,\n    height: this.height,\n    ...this.settings\n  };\n};\n\nCanvasDataSchema.methods.updateFromFabric = function(fabricJSON) {\n  this.objects = fabricJSON.objects || [];\n  this.backgroundColor = fabricJSON.background || this.backgroundColor;\n  this.backgroundImage = fabricJSON.backgroundImage || this.backgroundImage;\n  \n  if (fabricJSON.width) this.width = fabricJSON.width;\n  if (fabricJSON.height) this.height = fabricJSON.height;\n  \n  // Update settings\n  if (fabricJSON.zoom) this.settings.zoom = fabricJSON.zoom;\n  if (fabricJSON.viewportTransform) this.settings.viewportTransform = fabricJSON.viewportTransform;\n  \n  return this.save();\n};\n\nCanvasDataSchema.methods.createSnapshot = function() {\n  const CanvasHistory = mongoose.model('CanvasHistory');\n  \n  return CanvasHistory.create({\n    canvasId: this.canvasId,\n    designSetId: this.designSetId,\n    userId: this.userId,\n    version: this.version,\n    data: this.toObject(),\n    createdAt: new Date()\n  });\n};\n\n// Static methods\nCanvasDataSchema.statics.findByCanvasId = function(canvasId, version = null) {\n  const query = { canvasId };\n  if (version) query.version = version;\n  \n  return this.findOne(query).sort({ version: -1 });\n};\n\nCanvasDataSchema.statics.findByDesignSet = function(designSetId) {\n  return this.find({ designSetId }).sort({ updatedAt: -1 });\n};\n\nCanvasDataSchema.statics.bulkSync = function(updates) {\n  const bulkOps = updates.map(update => ({\n    updateOne: {\n      filter: { canvasId: update.canvasId },\n      update: { \n        $set: {\n          ...update.data,\n          lastSyncedAt: new Date()\n        },\n        $inc: { version: 1 }\n      },\n      upsert: true\n    }\n  }));\n  \n  return this.bulkWrite(bulkOps);\n};\n\nmodule.exports = mongoose.model('CanvasData', CanvasDataSchema);