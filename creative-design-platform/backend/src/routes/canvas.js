const express = require('express');\nconst { getCanvasService } = require('../services/canvasService');\n\nconst router = express.Router();\nconst canvasService = getCanvasService();\n\n// Create new canvas\nrouter.post('/', async (req, res) => {\n  try {\n    const {\n      canvasId,\n      designSetId,\n      userId = 1, // Default for development\n      width,\n      height,\n      backgroundColor,\n      objects,\n      settings,\n      metadata\n    } = req.body;\n    \n    if (!canvasId || !designSetId || !width || !height) {\n      return res.status(400).json({\n        error: 'Canvas ID, design set ID, width, and height are required'\n      });\n    }\n    \n    const canvas = await canvasService.createCanvas({\n      canvasId,\n      designSetId,\n      userId,\n      width,\n      height,\n      backgroundColor,\n      objects,\n      settings,\n      metadata\n    });\n    \n    res.status(201).json(canvas);\n  } catch (error) {\n    console.error('Error creating canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get canvas by ID\nrouter.get('/:canvasId', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { version } = req.query;\n    \n    const canvas = await canvasService.getCanvas(canvasId, version ? parseInt(version) : null);\n    \n    if (!canvas) {\n      return res.status(404).json({ error: 'Canvas not found' });\n    }\n    \n    res.json(canvas);\n  } catch (error) {\n    console.error('Error fetching canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Update canvas\nrouter.put('/:canvasId', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1, changeDescription, ...updateData } = req.body;\n    \n    const canvas = await canvasService.updateCanvas(\n      canvasId,\n      updateData,\n      userId,\n      changeDescription\n    );\n    \n    res.json(canvas);\n  } catch (error) {\n    console.error('Error updating canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Delete canvas\nrouter.delete('/:canvasId', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1 } = req.body;\n    \n    const result = await canvasService.deleteCanvas(canvasId, userId);\n    res.json(result);\n  } catch (error) {\n    console.error('Error deleting canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get canvas in Fabric.js format\nrouter.get('/:canvasId/fabric', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const canvas = await canvasService.getCanvas(canvasId);\n    \n    if (!canvas) {\n      return res.status(404).json({ error: 'Canvas not found' });\n    }\n    \n    const fabricJSON = canvas.toCanvasJSON();\n    res.json(fabricJSON);\n  } catch (error) {\n    console.error('Error getting Fabric.js canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Update canvas from Fabric.js JSON\nrouter.put('/:canvasId/fabric', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { fabricJSON, userId = 1 } = req.body;\n    \n    const canvas = await canvasService.getCanvas(canvasId);\n    if (!canvas) {\n      return res.status(404).json({ error: 'Canvas not found' });\n    }\n    \n    await canvas.updateFromFabric(fabricJSON);\n    \n    res.json({ success: true, message: 'Canvas updated from Fabric.js' });\n  } catch (error) {\n    console.error('Error updating canvas from Fabric.js:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get canvas history\nrouter.get('/:canvasId/history', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { limit = 10 } = req.query;\n    \n    const history = await canvasService.getCanvasHistory(canvasId, parseInt(limit));\n    res.json({ history, total: history.length });\n  } catch (error) {\n    console.error('Error fetching canvas history:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Create checkpoint\nrouter.post('/:canvasId/checkpoint', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1, label } = req.body;\n    \n    if (!label) {\n      return res.status(400).json({ error: 'Checkpoint label is required' });\n    }\n    \n    const checkpoint = await canvasService.createCheckpoint(canvasId, userId, label);\n    res.status(201).json(checkpoint);\n  } catch (error) {\n    console.error('Error creating checkpoint:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Restore version\nrouter.post('/:canvasId/restore/:version', async (req, res) => {\n  try {\n    const { canvasId, version } = req.params;\n    const { userId = 1 } = req.body;\n    \n    const restored = await canvasService.restoreVersion(\n      canvasId,\n      parseInt(version),\n      userId\n    );\n    \n    res.json(restored);\n  } catch (error) {\n    console.error('Error restoring version:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Lock canvas for editing\nrouter.post('/:canvasId/lock', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1, duration = 30000 } = req.body;\n    \n    const locked = await canvasService.lockCanvas(canvasId, userId, duration);\n    res.json({ success: true, lockedBy: locked.lockedBy, lockedAt: locked.lockedAt });\n  } catch (error) {\n    console.error('Error locking canvas:', error);\n    res.status(409).json({ error: error.message });\n  }\n});\n\n// Unlock canvas\nrouter.post('/:canvasId/unlock', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1 } = req.body;\n    \n    await canvasService.unlockCanvas(canvasId, userId);\n    res.json({ success: true, message: 'Canvas unlocked' });\n  } catch (error) {\n    console.error('Error unlocking canvas:', error);\n    res.status(409).json({ error: error.message });\n  }\n});\n\n// Get canvas statistics\nrouter.get('/:canvasId/stats', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const stats = await canvasService.getCanvasStats(canvasId);\n    res.json(stats);\n  } catch (error) {\n    console.error('Error fetching canvas stats:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Search canvases\nrouter.get('/search/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const {\n      q: searchTerm,\n      designSetId,\n      width,\n      height,\n      limit = 20,\n      skip = 0\n    } = req.query;\n    \n    const filters = {\n      designSetId,\n      width: width ? parseInt(width) : undefined,\n      height: height ? parseInt(height) : undefined,\n      limit: parseInt(limit),\n      skip: parseInt(skip)\n    };\n    \n    const canvases = await canvasService.searchCanvases(userId, searchTerm, filters);\n    res.json({ canvases, total: canvases.length });\n  } catch (error) {\n    console.error('Error searching canvases:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Design set operations\nrouter.get('/design-set/:designSetId', async (req, res) => {\n  try {\n    const { designSetId } = req.params;\n    const canvases = await canvasService.getDesignSetCanvases(designSetId);\n    res.json({ canvases, total: canvases.length });\n  } catch (error) {\n    console.error('Error fetching design set canvases:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Sync design set canvases\nrouter.post('/design-set/:designSetId/sync', async (req, res) => {\n  try {\n    const { designSetId } = req.params;\n    const { sourceCanvasId, changes, userId = 1 } = req.body;\n    \n    if (!sourceCanvasId || !changes) {\n      return res.status(400).json({\n        error: 'Source canvas ID and changes are required'\n      });\n    }\n    \n    const result = await canvasService.syncDesignSet(\n      designSetId,\n      sourceCanvasId,\n      changes,\n      userId\n    );\n    \n    res.json(result);\n  } catch (error) {\n    console.error('Error syncing design set:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Auto-save endpoint\nrouter.post('/:canvasId/autosave', async (req, res) => {\n  try {\n    const { canvasId } = req.params;\n    const { userId = 1, ...updateData } = req.body;\n    \n    const canvas = await canvasService.updateCanvas(\n      canvasId,\n      updateData,\n      userId,\n      'Auto-save'\n    );\n    \n    res.json({ success: true, version: canvas.version, savedAt: canvas.updatedAt });\n  } catch (error) {\n    console.error('Error auto-saving canvas:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Bulk operations\nrouter.post('/bulk/update', async (req, res) => {\n  try {\n    const { updates } = req.body;\n    \n    if (!Array.isArray(updates)) {\n      return res.status(400).json({ error: 'Updates must be an array' });\n    }\n    \n    const results = await Promise.allSettled(\n      updates.map(update => \n        canvasService.updateCanvas(\n          update.canvasId,\n          update.data,\n          update.userId,\n          update.changeDescription\n        )\n      )\n    );\n    \n    const successful = results.filter(r => r.status === 'fulfilled').length;\n    const failed = results.filter(r => r.status === 'rejected').length;\n    \n    res.json({\n      successful,\n      failed,\n      total: updates.length,\n      results: results.map((result, index) => ({\n        canvasId: updates[index].canvasId,\n        success: result.status === 'fulfilled',\n        error: result.status === 'rejected' ? result.reason.message : null\n      }))\n    });\n  } catch (error) {\n    console.error('Error in bulk update:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Maintenance endpoints\nrouter.post('/maintenance/cleanup', async (req, res) => {\n  try {\n    const { retentionDays = 30 } = req.body;\n    const result = await canvasService.cleanupOldVersions(retentionDays);\n    res.json(result);\n  } catch (error) {\n    console.error('Error cleaning up old versions:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\nrouter.post('/maintenance/optimize', async (req, res) => {\n  try {\n    const result = await canvasService.optimizeStorage();\n    res.json(result);\n  } catch (error) {\n    console.error('Error optimizing storage:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;